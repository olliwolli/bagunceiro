!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADMIN_MODE	z_features.h	23;"	d
ARCHIVES	Debug/sources.mk	/^ARCHIVES := $/;"	m
ASM_SRCS	Debug/sources.mk	/^ASM_SRCS := $/;"	m
BLOGGER_O	Makefile	/^BLOGGER_O=z_blogger.adm.o z_time.adm.o z_cdb.adm.o z_entry.adm.o $/;"	m
BLOG_O	Makefile	/^BLOG_O=z_mainblog.o z_blog.o z_entry.o z_time.o z_cdb.o z_format.o z_conf.o$/;"	m
BLOG_O_ADM	Makefile	/^BLOG_O_ADM=$(SOURCES:%.c=%.adm.o)$/;"	m
CC	Makefile	/^CC=$(DIET)\/bin\/diet gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -I$(DIET_INCLUDE) -g -DNO_ADMIN_MODE$/;"	m
CFLAGS_ADMIN	Makefile	/^CFLAGS_ADMIN=-Wall -I$(DIET_INCLUDE) -DADMIN_MODE$/;"	m
CHOOSE_DB_FILE	z_entry.c	37;"	d	file:
CLOG_TYPE_HTML	z_blog.h	11;"	d
CLOG_TYPE_RSS_2_0	z_blog.h	10;"	d
CONF_FILE	z_conf.h	4;"	d
COOKIE_MAX	z_features.h	10;"	d
CP_NOP	z_cdb.c	26;"	d	file:
CP_PAR	z_cdb.c	27;"	d	file:
CP_SRC	z_cdb.c	28;"	d	file:
CSS_COOKIE	z_blog.h	/^		CSS_COOKIE$/;"	e	enum:blog::csstype
CSS_DEFAULT	z_blog.h	/^	enum csstype { CSS_DEFAULT, CSS_ERROR, CSS_RESET, CSS_SELECT,$/;"	e	enum:blog::csstype
CSS_ERROR	z_blog.h	/^	enum csstype { CSS_DEFAULT, CSS_ERROR, CSS_RESET, CSS_SELECT,$/;"	e	enum:blog::csstype
CSS_RESET	z_blog.h	/^	enum csstype { CSS_DEFAULT, CSS_ERROR, CSS_RESET, CSS_SELECT,$/;"	e	enum:blog::csstype
CSS_SELECT	z_blog.h	/^	enum csstype { CSS_DEFAULT, CSS_ERROR, CSS_RESET, CSS_SELECT,$/;"	e	enum:blog::csstype
C_DEPS	Debug/sources.mk	/^C_DEPS := $/;"	m
C_SRCS	Debug/sources.mk	/^C_SRCS := $/;"	m
DAYS_SECS	z_time.c	48;"	d	file:
DAYS_SECS	z_time.c	61;"	d	file:
DIET	Makefile	/^DIET=\/opt\/diet$/;"	m
DIET_INCLUDE	Makefile	/^DIET_INCLUDE=$(DIET)\/include$/;"	m
FILE_BUFFER_SIZE	z_blog.h	13;"	d
HEADERS	Makefile	/^HEADERS=z_blog.h z_cdb.h z_conf.h z_entry.h z_features.h z_format.h z_time.h$/;"	m
LDFLAGS	Makefile	/^LDFLAGS=-lowfat -L$(DIET)\/lib -static$/;"	m
LDFLAGS_ADMIN	Makefile	/^LDFLAGS_ADMIN=$(LDFLAGS)$/;"	m
LIBS	Debug/objects.mk	/^LIBS :=$/;"	m
MAX_CSS_ARG	z_blog.h	40;"	d
MAX_ENTRIES_PER_DAY	z_entry.h	9;"	d
MAX_ENTRY_SIZE	z_entry.h	8;"	d
MAX_FMT_BIN_LENGTH_KEY	z_time.h	11;"	d
MAX_FMT_HEX_LENGTH_KEY	z_time.h	10;"	d
MAX_FMT_LENGTH	z_mainblog.c	13;"	d	file:
MAX_FMT_LENGTH_KEY	z_time.h	9;"	d
MAX_KEY_LENGTH_STR	z_mainblog.c	12;"	d	file:
N_ACTION	z_features.h	/^enum notice { N_ERROR, N_NOTE, N_NONE, N_ACTION };$/;"	e	enum:notice
N_ERROR	z_features.h	/^enum notice { N_ERROR, N_NOTE, N_NONE, N_ACTION };$/;"	e	enum:notice
N_NONE	z_features.h	/^enum notice { N_ERROR, N_NOTE, N_NONE, N_ACTION };$/;"	e	enum:notice
N_NOTE	z_features.h	/^enum notice { N_ERROR, N_NOTE, N_NONE, N_ACTION };$/;"	e	enum:notice
OBJS	Debug/sources.mk	/^OBJS := $/;"	m
OBJ_SRCS	Debug/sources.mk	/^OBJ_SRCS := $/;"	m
OP_ADD	z_cdb.c	/^	OP_CPY, OP_MOD, OP_DEL, OP_ADD$/;"	e	enum:cop	file:
OP_ADD	z_cdb.c	25;"	d	file:
OP_CPY	z_cdb.c	/^	OP_CPY, OP_MOD, OP_DEL, OP_ADD$/;"	e	enum:cop	file:
OP_CPY	z_cdb.c	22;"	d	file:
OP_DEL	z_cdb.c	/^	OP_CPY, OP_MOD, OP_DEL, OP_ADD$/;"	e	enum:cop	file:
OP_DEL	z_cdb.c	24;"	d	file:
OP_MOD	z_cdb.c	/^	OP_CPY, OP_MOD, OP_DEL, OP_ADD$/;"	e	enum:cop	file:
OP_MOD	z_cdb.c	23;"	d	file:
O_SRCS	Debug/sources.mk	/^O_SRCS := $/;"	m
POSTDATA_MAX	z_features.h	8;"	d
PROGRAM_NAME	z_features.h	12;"	d
QA_ADD	z_blog.h	/^			, QA_DELETE, QA_ADD, QA_MODIFY$/;"	e	enum:query::qaction
QA_DELETE	z_blog.h	/^			, QA_DELETE, QA_ADD, QA_MODIFY$/;"	e	enum:query::qaction
QA_MODIFY	z_blog.h	/^			, QA_DELETE, QA_ADD, QA_MODIFY$/;"	e	enum:query::qaction
QA_SHOW	z_blog.h	/^	enum qaction { QA_SHOW$/;"	e	enum:query::qaction
QRY_TS	z_blog.h	/^	enum qtype { QRY_TS, QRY_WEEK } type;$/;"	e	enum:query::qtype
QRY_WEEK	z_blog.h	/^	enum qtype { QRY_TS, QRY_WEEK } type;$/;"	e	enum:query::qtype
QUERY_MAX	z_features.h	9;"	d
RM	Debug/makefile	/^RM := rm -rf$/;"	m
SOURCES	Makefile	/^SOURCES=z_blog.c z_cdb.c z_conf.c z_entry.c z_format.c z_mainblog.c z_time.c$/;"	m
SUBDIRS	Debug/sources.mk	/^SUBDIRS := \\$/;"	m
S_HTML	z_blog.h	/^	enum stype { S_HTML, S_RSS } stype;$/;"	e	enum:blog::stype
S_RSS	z_blog.h	/^	enum stype { S_HTML, S_RSS } stype;$/;"	e	enum:blog::stype
S_UPPER_SRCS	Debug/sources.mk	/^S_UPPER_SRCS := $/;"	m
TARGETS	Makefile	/^TARGETS=blog.cgi blogger blog.cgi.adm blog.cgi.strip$/;"	m
USER_FILE	z_conf.h	5;"	d
USER_OBJS	Debug/objects.mk	/^USER_OBJS :=$/;"	m
_Z_BLOG_H	z_blog.h	2;"	d
_Z_CDB_H	z_cdb.h	2;"	d
_Z_ENTRY_H	z_entry.h	2;"	d
_Z_FEATURES_H	z_features.h	2;"	d
_Z_TIME_H	z_time.h	2;"	d
__cdb_remake	z_cdb.c	/^static int __cdb_remake(const char * file, const char * k, const size_t ks, const array * v,$/;"	f	file:	signature:(const char * file, const char * k, const size_t ks, const array * v, enum cop op)
__cdb_remake_real	z_cdb.c	/^static int __cdb_remake_real(const char *name, const char *newname,$/;"	f	file:	signature:(const char *name, const char *newname, const unsigned char *skey, const size_t slen, unsigned char *value, size_t vlen, enum cop op)
__d	z_mainblog.c	/^static void __d(const char *desc, const char *value)$/;"	f	file:	signature:(const char *desc, const char *value)
__make_tmp_name	z_cdb.c	/^inline static size_t __make_tmp_name(char * tmpname, const char * file)$/;"	f	file:	signature:(char * tmpname, const char * file)
action	z_blog.h	/^	} action;$/;"	m	struct:query	typeref:enum:query::qaction	access:public
add_entry	z_entry.c	/^int add_entry(const char *dbpath, struct nentry *entry)$/;"	f	signature:(const char *dbpath, struct nentry *entry)
add_entry	z_entry.h	/^int add_entry(const char *dbpath, struct nentry *entry);$/;"	p	signature:(const char *dbpath, struct nentry *entry)
add_entry_now	z_entry.c	/^int add_entry_now(const char *dbpath, struct nentry *entry)$/;"	f	signature:(const char *dbpath, struct nentry *entry)
add_entry_now	z_entry.h	/^int add_entry_now(const char *dbpath, struct nentry *entry);$/;"	p	signature:(const char *dbpath, struct nentry *entry)
add_key	z_cdb.h	/^	void (*add_key) (void *e, unsigned char *s, size_t l);$/;"	m	struct:eops	access:public
add_to_array	z_cdb.h	/^	void (*add_to_array) (void *e, array * arr);$/;"	m	struct:eops	access:public
add_val	z_cdb.h	/^	void (*add_val) (void *e, unsigned char *s, size_t l);$/;"	m	struct:eops	access:public
alloc	z_cdb.h	/^	void *(*alloc) ();$/;"	m	struct:eops	access:public
blog	z_blog.h	/^typedef struct blog {$/;"	s
blog::CSS_COOKIE	z_blog.h	/^		CSS_COOKIE$/;"	e	enum:blog::csstype
blog::CSS_DEFAULT	z_blog.h	/^	enum csstype { CSS_DEFAULT, CSS_ERROR, CSS_RESET, CSS_SELECT,$/;"	e	enum:blog::csstype
blog::CSS_ERROR	z_blog.h	/^	enum csstype { CSS_DEFAULT, CSS_ERROR, CSS_RESET, CSS_SELECT,$/;"	e	enum:blog::csstype
blog::CSS_RESET	z_blog.h	/^	enum csstype { CSS_DEFAULT, CSS_ERROR, CSS_RESET, CSS_SELECT,$/;"	e	enum:blog::csstype
blog::CSS_SELECT	z_blog.h	/^	enum csstype { CSS_DEFAULT, CSS_ERROR, CSS_RESET, CSS_SELECT,$/;"	e	enum:blog::csstype
blog::S_HTML	z_blog.h	/^	enum stype { S_HTML, S_RSS } stype;$/;"	e	enum:blog::stype
blog::S_RSS	z_blog.h	/^	enum stype { S_HTML, S_RSS } stype;$/;"	e	enum:blog::stype
blog::cookie	z_blog.h	/^	char *cookie;$/;"	m	struct:blog	access:public
blog::css	z_blog.h	/^	char css[MAX_CSS_ARG];$/;"	m	struct:blog	access:public
blog::csstype	z_blog.h	/^	enum csstype { CSS_DEFAULT, CSS_ERROR, CSS_RESET, CSS_SELECT,$/;"	g	struct:blog	access:public
blog::csstype	z_blog.h	/^	} csstype;$/;"	m	struct:blog	typeref:enum:blog::csstype	access:public
blog::db	z_blog.h	/^	char db[128];$/;"	m	struct:blog	access:public
blog::fmt	z_blog.h	/^	struct fmting *fmt;$/;"	m	struct:blog	typeref:struct:blog::fmting	access:public
blog::host	z_blog.h	/^	char *host;$/;"	m	struct:blog	access:public
blog::input	z_blog.h	/^	array input;$/;"	m	struct:blog	access:public
blog::ptime	z_blog.h	/^	struct timeval ptime;$/;"	m	struct:blog	typeref:struct:blog::timeval	access:public
blog::qry	z_blog.h	/^	query_t qry;$/;"	m	struct:blog	access:public
blog::script	z_blog.h	/^	char *script;$/;"	m	struct:blog	access:public
blog::stype	z_blog.h	/^	enum stype { S_HTML, S_RSS } stype;$/;"	g	struct:blog	access:public
blog::stype	z_blog.h	/^	enum stype { S_HTML, S_RSS } stype;$/;"	m	struct:blog	typeref:enum:blog::stype	access:public
blog::title	z_blog.h	/^	char title[20];$/;"	m	struct:blog	access:public
blog_t	z_blog.h	/^} blog_t;$/;"	t	typeref:struct:blog
caldate_fmtn	z_time.c	/^unsigned int caldate_fmtn(char *s, const struct caldate *cd)$/;"	f	signature:(char *s, const struct caldate *cd)
caldate_fmtn	z_time.h	/^unsigned int caldate_fmtn(char *s, const struct caldate *cd);$/;"	p	signature:(char *s, const struct caldate *cd)
cdb_add	z_cdb.c	/^int cdb_add(const char * file, const char * k, size_t ks, const array * v)$/;"	f	signature:(const char * file, const char * k, size_t ks, const array * v)
cdb_add	z_cdb.h	/^int cdb_add(const char * name, const char * k, const size_t ks, const array * v);$/;"	p	signature:(const char * name, const char * k, const size_t ks, const array * v)
cdb_del	z_cdb.c	/^int cdb_del(const char * file, const char * k, const size_t ks)$/;"	f	signature:(const char * file, const char * k, const size_t ks)
cdb_del	z_cdb.h	/^int cdb_del(const char * name, const char * k, const size_t ks);$/;"	p	signature:(const char * name, const char * k, const size_t ks)
cdb_get	z_cdb.c	/^int cdb_get(const char * file, const char * k, const size_t ks, array * v)$/;"	f	signature:(const char * file, const char * k, const size_t ks, array * v)
cdb_get	z_cdb.h	/^int cdb_get(const char * name, const char * k, const size_t ks, array * v);$/;"	p	signature:(const char * name, const char * k, const size_t ks, array * v)
cdb_init_file	z_cdb.c	/^int cdb_init_file(const char * file)$/;"	f	signature:(const char * file)
cdb_init_file	z_cdb.h	/^int cdb_init_file(const char * file);$/;"	p	signature:(const char * file)
cdb_mod	z_cdb.c	/^int cdb_mod(const char * file, const char * k, const size_t ks, const array * v)$/;"	f	signature:(const char * file, const char * k, const size_t ks, const array * v)
cdb_mod	z_cdb.h	/^int cdb_mod(const char * name, const char * k, const size_t ks, const array * v);$/;"	p	signature:(const char * name, const char * k, const size_t ks, const array * v)
cdb_read_all	z_cdb.c	/^int cdb_read_all(const char *name, array * entries, struct eops *ops)$/;"	f	signature:(const char *name, array * entries, struct eops *ops)
cdb_read_all	z_cdb.h	/^int cdb_read_all(const char *name, array * entries, struct eops *ops);$/;"	p	signature:(const char *name, array * entries, struct eops *ops)
choose_file	z_conf.c	/^static void choose_file(array * file, const char *dbpath)$/;"	f	file:	signature:(array * file, const char *dbpath)
choose_file	z_entry.c	/^inline static void choose_file(array * file, const char *dbpath, const struct taia *key)$/;"	f	file:	signature:(array * file, const char *dbpath, const struct taia *key)
cookie	z_blog.h	/^	char *cookie;$/;"	m	struct:blog	access:public
cop	z_cdb.c	/^typedef enum cop {$/;"	g	file:
cop_t	z_cdb.c	/^} cop_t;$/;"	t	typeref:enum:cop	file:
css	z_blog.h	/^	char css[MAX_CSS_ARG];$/;"	m	struct:blog	access:public
csstype	z_blog.h	/^	enum csstype { CSS_DEFAULT, CSS_ERROR, CSS_RESET, CSS_SELECT,$/;"	g	struct:blog	access:public
csstype	z_blog.h	/^	} csstype;$/;"	m	struct:blog	typeref:enum:blog::csstype	access:public
daction	z_mainblog.c	/^static char daction[4][10] = { "Show", "Delete", "Add", "Modify" };$/;"	v	file:
date	z_entry.h	/^	struct caldate *date;$/;"	m	struct:day_entry	typeref:struct:day_entry::caldate	access:public
day_entries	z_format.h	/^	void (*day_entries) (const blog_t * conf, struct day_entry * e,$/;"	m	struct:fmting	access:public
day_entries_html	z_format.c	/^void day_entries_html(const blog_t * conf, struct day_entry *de, size_t elen)$/;"	f	signature:(const blog_t * conf, struct day_entry *de, size_t elen)
day_entries_rss	z_format.c	/^void day_entries_rss(const blog_t * conf, struct day_entry *de, size_t elen)$/;"	f	signature:(const blog_t * conf, struct day_entry *de, size_t elen)
day_entry	z_entry.h	/^typedef struct day_entry {$/;"	s
day_entry::date	z_entry.h	/^	struct caldate *date;$/;"	m	struct:day_entry	typeref:struct:day_entry::caldate	access:public
day_entry::es	z_entry.h	/^	array *es;$/;"	m	struct:day_entry	access:public
day_entry_t	z_entry.h	/^} day_entry_t;$/;"	t	typeref:struct:day_entry
db	z_blog.h	/^	char db[128];$/;"	m	struct:blog	access:public
debug_print	z_mainblog.c	/^static void debug_print(const blog_t * conf, array * ps, array * qs)$/;"	f	file:	signature:(const blog_t * conf, array * ps, array * qs)
debugmsg	z_mainblog.c	/^static array debugmsg;$/;"	v	file:
delete_entry	z_entry.c	/^int delete_entry(const char *dbpath, struct nentry *entry)$/;"	f	signature:(const char *dbpath, struct nentry *entry)
delete_entry	z_entry.h	/^int delete_entry(const char *dbpath, struct nentry *entry);$/;"	p	signature:(const char *dbpath, struct nentry *entry)
dump_entries	z_entry.c	/^void dump_entries(array * entries)$/;"	f	signature:(array * entries)
dump_entries	z_entry.h	/^void dump_entries(array * entries);$/;"	p	signature:(array * entries)
e	z_entry.h	/^	array e;		\/*  entry *\/$/;"	m	struct:nentry	access:public
e_add_key	z_entry.c	/^void e_add_key(void *e, unsigned char *s, size_t l)$/;"	f	signature:(void *e, unsigned char *s, size_t l)
e_add_key	z_entry.h	/^void e_add_key(void *e, unsigned char *s, size_t l);$/;"	p	signature:(void *e, unsigned char *s, size_t l)
e_add_to_array	z_entry.c	/^void e_add_to_array(void *e, array * arr)$/;"	f	signature:(void *e, array * arr)
e_add_to_array	z_entry.h	/^void e_add_to_array(void *e, array * arr);$/;"	p	signature:(void *e, array * arr)
e_add_val	z_entry.c	/^void e_add_val(void *e, unsigned char *s, size_t l)$/;"	f	signature:(void *e, unsigned char *s, size_t l)
e_add_val	z_entry.h	/^void e_add_val(void *e, unsigned char *s, size_t l);$/;"	p	signature:(void *e, unsigned char *s, size_t l)
e_malloc	z_entry.c	/^void *e_malloc()$/;"	f
e_malloc	z_entry.h	/^void *e_malloc();$/;"	p	signature:()
end	z_blog.h	/^	unsigned int end;	\/* offset from today, positive *\/$/;"	m	struct:query	access:public
entry_dump	z_entry.c	/^void entry_dump(const struct nentry *e)$/;"	f	signature:(const struct nentry *e)
entry_dump	z_entry.h	/^void entry_dump(const struct nentry *e);$/;"	p	signature:(const struct nentry *e)
eops	z_cdb.h	/^typedef struct eops {$/;"	s
eops::add_key	z_cdb.h	/^	void (*add_key) (void *e, unsigned char *s, size_t l);$/;"	m	struct:eops	access:public
eops::add_to_array	z_cdb.h	/^	void (*add_to_array) (void *e, array * arr);$/;"	m	struct:eops	access:public
eops::add_val	z_cdb.h	/^	void (*add_val) (void *e, unsigned char *s, size_t l);$/;"	m	struct:eops	access:public
eops::alloc	z_cdb.h	/^	void *(*alloc) ();$/;"	m	struct:eops	access:public
eops_t	z_cdb.h	/^} eops_t;$/;"	t	typeref:struct:eops
eprint	z_features.h	37;"	d
eprintf	z_features.h	42;"	d
eprintm	z_features.h	39;"	d
eprintmf	z_features.h	44;"	d
error	z_features.h	/^	int error;$/;"	m	struct:errors	access:public
errors	z_features.h	/^struct errors {$/;"	s
errors::error	z_features.h	/^	int error;$/;"	m	struct:errors	access:public
errors::note	z_features.h	/^	char note[128];$/;"	m	struct:errors	access:public
errors::type	z_features.h	/^	enum notice type;$/;"	m	struct:errors	typeref:enum:errors::notice	access:public
es	z_entry.h	/^	array *es;$/;"	m	struct:day_entry	access:public
exists	z_cdb.c	/^inline static int exists(const char *file)$/;"	f	file:	signature:(const char *file)
fetch_entries_days	z_blog.c	/^static int fetch_entries_days(const blog_t * conf, array * blog)$/;"	f	file:	signature:(const blog_t * conf, array * blog)
fetch_entry_ts	z_blog.c	/^static int fetch_entry_ts(const blog_t * conf, array * blog)$/;"	f	file:	signature:(const blog_t * conf, array * blog)
fmt	z_blog.h	/^	struct fmting *fmt;$/;"	m	struct:blog	typeref:struct:blog::fmting	access:public
fmt_html	z_format.c	/^struct fmting fmt_html = {$/;"	v	typeref:struct:fmting
fmt_rss	z_format.c	/^struct fmting fmt_rss = {$/;"	v	typeref:struct:fmting
fmt_time_bin	z_time.c	/^size_t fmt_time_bin(array * s, const struct taia * time)$/;"	f	signature:(array * s, const struct taia * time)
fmt_time_hex	z_time.c	/^size_t fmt_time_hex(char * s, const struct taia *time)$/;"	f	signature:(char * s, const struct taia *time)
fmt_time_hex	z_time.h	/^size_t fmt_time_hex(char * s, const struct taia *time);$/;"	p	signature:(char * s, const struct taia *time)
fmt_time_str	z_time.c	/^size_t fmt_time_str(char * s, const struct taia *time)$/;"	f	signature:(char * s, const struct taia *time)
fmt_time_str	z_time.h	/^size_t fmt_time_str(char * s, const struct taia *time);$/;"	p	signature:(char * s, const struct taia *time)
fmt_time_tstr	z_time.c	/^size_t fmt_time_tstr(array * s, const struct taia * time)$/;"	f	signature:(array * s, const struct taia * time)
fmt_time_tstr	z_time.h	/^size_t fmt_time_tstr(char * s, const struct taia *time);$/;"	p	signature:(char * s, const struct taia *time)
fmting	z_format.h	/^typedef struct fmting {$/;"	s
fmting::day_entries	z_format.h	/^	void (*day_entries) (const blog_t * conf, struct day_entry * e,$/;"	m	struct:fmting	access:public
fmting::footer	z_format.h	/^	void (*footer) (const blog_t * conf);$/;"	m	struct:fmting	access:public
fmting::header	z_format.h	/^	void (*header) (const blog_t * conf);$/;"	m	struct:fmting	access:public
fmting_t	z_format.h	/^} fmting_t;$/;"	t	typeref:struct:fmting
footer	z_format.h	/^	void (*footer) (const blog_t * conf);$/;"	m	struct:fmting	access:public
gerr	z_blog.c	/^struct errors gerr = {$/;"	v	typeref:struct:errors
gerr	z_features.h	/^} gerr;$/;"	v	typeref:struct:errors
get_cookie_string	z_mainblog.c	/^static void get_cookie_string(array * co)$/;"	f	file:	signature:(array * co)
get_param_char	z_mainblog.c	/^static int get_param_char(array * q_str, size_t qmax, char *search, char *ret,$/;"	f	file:	signature:(array * q_str, size_t qmax, char *search, char *ret, size_t n)
get_post_string	z_mainblog.c	/^static void get_post_string(array * ps)$/;"	f	file:	signature:(array * ps)
get_query_string	z_mainblog.c	/^static void get_query_string(array * qs)$/;"	f	file:	signature:(array * qs)
handle_query	z_blog.c	/^int handle_query(blog_t * conf)$/;"	f	signature:(blog_t * conf)
handle_query	z_blog.h	/^int handle_query(blog_t * conf);$/;"	p	signature:(blog_t * conf)
header	z_format.h	/^	void (*header) (const blog_t * conf);$/;"	m	struct:fmting	access:public
host	z_blog.h	/^	char *host;$/;"	m	struct:blog	access:public
ht_sub_days	z_time.c	/^size_t ht_sub_days(struct taia * time, const unsigned int days)$/;"	f	signature:(struct taia * time, const unsigned int days)
ht_sub_days	z_time.h	/^size_t ht_sub_days(struct taia *time, const unsigned int days);$/;"	p	signature:(struct taia *time, const unsigned int days)
input	z_blog.h	/^	array input;$/;"	m	struct:blog	access:public
k	z_entry.h	/^	struct taia k;		\/*  key *\/$/;"	m	struct:nentry	typeref:struct:nentry::taia	access:public
load_config	z_conf.c	/^int load_config(blog_t * conf)$/;"	f	signature:(blog_t * conf)
load_config	z_conf.h	/^int load_config(blog_t * conf);$/;"	p	signature:(blog_t * conf)
main	z_blogger.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	z_mainblog.c	/^int main()$/;"	f
modify_entry	z_entry.c	/^int modify_entry(const char *dbpath, struct nentry *entry)$/;"	f	signature:(const char *dbpath, struct nentry *entry)
modify_entry	z_entry.h	/^int modify_entry(const char *dbpath, struct nentry *entry);$/;"	p	signature:(const char *dbpath, struct nentry *entry)
months	z_time.c	/^char months[12][4] =$/;"	v
nentry	z_entry.h	/^typedef struct nentry {$/;"	s
nentry::e	z_entry.h	/^	array e;		\/*  entry *\/$/;"	m	struct:nentry	access:public
nentry::k	z_entry.h	/^	struct taia k;		\/*  key *\/$/;"	m	struct:nentry	typeref:struct:nentry::taia	access:public
nentry_t	z_entry.h	/^} nentry_t;$/;"	t	typeref:struct:nentry
new_nentry	z_entry.h	11;"	d
note	z_features.h	/^	char note[128];$/;"	m	struct:errors	access:public
notice	z_features.h	/^enum notice { N_ERROR, N_NOTE, N_NONE, N_ACTION };$/;"	g
parse_cookie	z_mainblog.c	/^static void parse_cookie(blog_t * conf, array * co)$/;"	f	file:	signature:(blog_t * conf, array * co)
parse_postdata	z_mainblog.c	/^static void parse_postdata(blog_t * conf, array * pd)$/;"	f	file:	signature:(blog_t * conf, array * pd)
parse_query	z_mainblog.c	/^static void parse_query(blog_t * conf, array * qs)$/;"	f	file:	signature:(blog_t * conf, array * qs)
print_add_entry	z_format.c	/^int print_add_entry(const blog_t * conf)$/;"	f	signature:(const blog_t * conf)
print_add_entry	z_format.h	/^int print_add_entry(const blog_t * conf);$/;"	p	signature:(const blog_t * conf)
print_date_html	z_format.c	/^static void print_date_html(struct day_entry *e)$/;"	f	file:	signature:(struct day_entry *e)
print_date_rss	z_format.c	/^static void print_date_rss(struct day_entry *de)$/;"	f	file:	signature:(struct day_entry *de)
print_footer_html	z_format.c	/^void print_footer_html(const blog_t * conf)$/;"	f	signature:(const blog_t * conf)
print_footer_rss	z_format.c	/^void print_footer_rss(const blog_t * conf)$/;"	f	signature:(const blog_t * conf)
print_header_html	z_format.c	/^void print_header_html(const blog_t * conf)$/;"	f	signature:(const blog_t * conf)
print_header_rss	z_format.c	/^void print_header_rss(const blog_t * conf)$/;"	f	signature:(const blog_t * conf)
print_help	z_blogger.c	/^void print_help()$/;"	f
print_key_html	z_format.c	/^static void print_key_html(struct nentry *e)$/;"	f	file:	signature:(struct nentry *e)
print_key_plain	z_format.c	/^static void print_key_plain(struct nentry *e)$/;"	f	file:	signature:(struct nentry *e)
print_mod_entry	z_format.c	/^int print_mod_entry(const blog_t * conf, struct nentry *n)$/;"	f	signature:(const blog_t * conf, struct nentry *n)
print_mod_entry	z_format.h	/^int print_mod_entry(const blog_t * conf, struct nentry *n);$/;"	p	signature:(const blog_t * conf, struct nentry *n)
print_notice_html	z_format.c	/^static void print_notice_html(const blog_t * conf)$/;"	f	file:	signature:(const blog_t * conf)
print_perma_link	z_format.c	/^static void print_perma_link(const blog_t * conf, struct nentry *e)$/;"	f	file:	signature:(const blog_t * conf, struct nentry *e)
print_show	z_format.c	/^void print_show(array * blog, blog_t * conf)$/;"	f	signature:(array * blog, blog_t * conf)
print_show	z_format.h	/^void print_show(array * blog, blog_t * conf);$/;"	p	signature:(array * blog, blog_t * conf)
print_time	z_time.c	/^size_t print_time(const struct taia * time)$/;"	f	signature:(const struct taia * time)
print_time	z_time.h	/^size_t print_time(const struct taia *time);$/;"	p	signature:(const struct taia *time)
ptime	z_blog.h	/^	struct timeval ptime;$/;"	m	struct:blog	typeref:struct:blog::timeval	access:public
qaction	z_blog.h	/^	enum qaction { QA_SHOW$/;"	g	struct:query	access:public
qry	z_blog.h	/^	query_t qry;$/;"	m	struct:blog	access:public
qtype	z_blog.h	/^	enum qtype { QRY_TS, QRY_WEEK } type;$/;"	g	struct:query	access:public
query	z_blog.h	/^typedef struct query {$/;"	s
query::QA_ADD	z_blog.h	/^			, QA_DELETE, QA_ADD, QA_MODIFY$/;"	e	enum:query::qaction
query::QA_DELETE	z_blog.h	/^			, QA_DELETE, QA_ADD, QA_MODIFY$/;"	e	enum:query::qaction
query::QA_MODIFY	z_blog.h	/^			, QA_DELETE, QA_ADD, QA_MODIFY$/;"	e	enum:query::qaction
query::QA_SHOW	z_blog.h	/^	enum qaction { QA_SHOW$/;"	e	enum:query::qaction
query::QRY_TS	z_blog.h	/^	enum qtype { QRY_TS, QRY_WEEK } type;$/;"	e	enum:query::qtype
query::QRY_WEEK	z_blog.h	/^	enum qtype { QRY_TS, QRY_WEEK } type;$/;"	e	enum:query::qtype
query::action	z_blog.h	/^	} action;$/;"	m	struct:query	typeref:enum:query::qaction	access:public
query::end	z_blog.h	/^	unsigned int end;	\/* offset from today, positive *\/$/;"	m	struct:query	access:public
query::qaction	z_blog.h	/^	enum qaction { QA_SHOW$/;"	g	struct:query	access:public
query::qtype	z_blog.h	/^	enum qtype { QRY_TS, QRY_WEEK } type;$/;"	g	struct:query	access:public
query::start	z_blog.h	/^	unsigned int start;	\/* offset from today, positive *\/$/;"	m	struct:query	access:public
query::ts	z_blog.h	/^	char ts[MAX_FMT_LENGTH_KEY];$/;"	m	struct:query	access:public
query::type	z_blog.h	/^	enum qtype { QRY_TS, QRY_WEEK } type;$/;"	m	struct:query	typeref:enum:query::qtype	access:public
query_t	z_blog.h	/^} query_t;$/;"	t	typeref:struct:query
read_conf	z_conf.c	/^static int read_conf(blog_t * conf, char *key, size_t ks, char *dest)$/;"	f	file:	signature:(blog_t * conf, char *key, size_t ks, char *dest)
read_stdin	z_blogger.c	/^void read_stdin(array * content)$/;"	f	signature:(array * content)
scan_time_hex	z_time.c	/^size_t scan_time_hex(const char * s, struct taia * time)$/;"	f	signature:(const char * s, struct taia * time)
scan_time_hex	z_time.h	/^size_t scan_time_hex(const char * s, struct taia *time);$/;"	p	signature:(const char * s, struct taia *time)
scan_time_tstr	z_time.c	/^size_t scan_time_tstr(const array * s, struct taia * time)$/;"	f	signature:(const array * s, struct taia * time)
scan_time_tstr	z_time.h	/^size_t scan_time_tstr(const char * s, struct taia *time);$/;"	p	signature:(const char * s, struct taia *time)
script	z_blog.h	/^	char *script;$/;"	m	struct:blog	access:public
show_day	z_entry.c	/^int show_day(const char *dbpath, array * entries, const struct taia *day)$/;"	f	signature:(const char *dbpath, array * entries, const struct taia *day)
show_day	z_entry.h	/^int show_day(const char *dbpath, array * entries, const struct taia *tday);$/;"	p	signature:(const char *dbpath, array * entries, const struct taia *tday)
show_entry	z_entry.c	/^int show_entry(const char *dbpath, struct nentry *entry)$/;"	f	signature:(const char *dbpath, struct nentry *entry)
show_entry	z_entry.h	/^int show_entry(const char *dbpath, struct nentry *entry);$/;"	p	signature:(const char *dbpath, struct nentry *entry)
show_file	z_entry.c	/^int show_file(array * entries, const char *file)$/;"	f	signature:(array * entries, const char *file)
show_file	z_entry.h	/^int show_file(array * entries, const char *file);$/;"	p	signature:(array * entries, const char *file)
sprint	z_features.h	36;"	d
sprintf	z_features.h	41;"	d
sprintm	z_features.h	38;"	d
sprintmf	z_features.h	43;"	d
sprintn	z_features.h	46;"	d
start	z_blog.h	/^	unsigned int start;	\/* offset from today, positive *\/$/;"	m	struct:query	access:public
stype	z_blog.h	/^	enum stype { S_HTML, S_RSS } stype;$/;"	g	struct:blog	access:public
stype	z_blog.h	/^	enum stype { S_HTML, S_RSS } stype;$/;"	m	struct:blog	typeref:enum:blog::stype	access:public
time_stop_print	z_time.c	/^void time_stop_print(struct timeval *time)$/;"	f	signature:(struct timeval *time)
time_stop_print	z_time.h	/^void time_stop_print(struct timeval *time);$/;"	p	signature:(struct timeval *time)
timeval_subtract	z_time.c	/^static inline int timeval_subtract(struct timeval *result, struct timeval *x,$/;"	f	file:	signature:(struct timeval *result, struct timeval *x, struct timeval *y)
title	z_blog.h	/^	char title[20];$/;"	m	struct:blog	access:public
ts	z_blog.h	/^	char ts[MAX_FMT_LENGTH_KEY];$/;"	m	struct:query	access:public
type	z_blog.h	/^	enum qtype { QRY_TS, QRY_WEEK } type;$/;"	m	struct:query	typeref:enum:query::qtype	access:public
type	z_features.h	/^	enum notice type;$/;"	m	struct:errors	typeref:enum:errors::notice	access:public
weekday	z_time.c	/^static int weekday(int month, int day, int year)$/;"	f	file:	signature:(int month, int day, int year)
weekdays	z_time.c	/^char weekdays[7][4] = { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };$/;"	v
